#!/usr/bin/env ruby
require File.dirname(__FILE__) + '/utils/dependencies.rb'
ENV.merge!(Dotenv.load)

def load_loaders
  load 'loaders/base.rb'
  Dir[File.dirname(__FILE__) + '/loaders/**/*.rb'].each { |file| load file }
end

Dir[File.dirname(__FILE__) + '/utils/**/*.rb'].each { |file| require file }

load_loaders

Readline.completion_append_character = ' '
Readline.completion_proc = Autocompletion.generate_proc

def create_loader_base_unless_exists
  path = 'loaders/base.rb'
  return if File.exist?(path)

  File.open(path, 'w') do |f|
    f.write(File.read('templates/loader_base.rb'))
  end
end

history = File.open('.postwoman_history', 'a+').readlines.map(&:chomp)

Readline::HISTORY.push(*history)

def handle_history(line)
  unless Readline::HISTORY.to_a.empty?
    return Readline::HISTORY.pop if /^\s*$/ =~ line
    return Readline::HISTORY.pop if Readline::HISTORY.to_a[-2] == line
  end

  File.write('.postwoman_history', "#{line}\n", mode: 'a')
end

create_loader_base_unless_exists

while(line = Readline.readline('> ', true))
  handle_history(line)

  args = ArgsHandler.parse(line)
  load_loaders
  attempt_command(args)
end
